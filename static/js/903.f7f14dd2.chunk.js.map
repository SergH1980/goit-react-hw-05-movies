{"version":3,"file":"static/js/903.f7f14dd2.chunk.js","mappings":"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","sources":["components/ListItem/ListItem.styled.jsx","components/ListItem/ListItem.jsx","components/Searchbar/Searchbar.jsx","pages/Movies/Movies.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Link as LinkStyled } from 'react-router-dom';\n\nexport const emptyArray = styled.div`\n  font-size: 20px;\n`;\n\nexport const Link = styled(LinkStyled)`\n  display: flex;\n  align-items: center;\n  font-size: 40px;\n\n  text-decoration: none;\n  color: black;\n\n  :hover {\n    color: orange;\n  }\n`;\n","import { Link } from './ListItem.styled';\nimport { MdLocalMovies } from 'react-icons/md';\nimport { useLocation } from 'react-router-dom';\n// import PropTypes from 'prop-types';\n\nexport default function ListItem({ resultArray }) {\n  const location = useLocation();\n  // console.log(location);\n\n  if (resultArray.length === 0) {\n    return (\n      <div style={{ fontSize: '30px', color: 'orange' }}>\n        Nothing to show. Please enter search query!\n      </div>\n    );\n  }\n\n  return resultArray.map(movie => {\n    return (\n      <li\n        key={movie.id}\n        style={{\n          paddingBottom: '10px',\n        }}\n      >\n        <Link\n          to={location.pathname === '/' ? `/movies/${movie.id}` : `${movie.id}`}\n          state={{ from: location.search }}\n          id={movie.id}\n        >\n          <MdLocalMovies size={35} /> {movie.title}\n        </Link>\n      </li>\n    );\n  });\n}\n\n// ListItem.propTypes = {\n//   resultArray: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.number.isRequired,\n//       title: PropTypes.string.isRequired,\n//       release_date: PropTypes.string.isRequired,\n//       overview: PropTypes.string.isRequired,\n//       poster_path: PropTypes.string,\n//       vote_average: PropTypes.number.isRequired,\n//     })\n//   ).isRequired,\n// };\n","import PropTypes from 'prop-types';\nimport { Formik, Form, Field } from 'formik';\nimport * as yup from 'yup';\nimport './Searchbar.css';\n\nlet schema = yup.object().shape({ query: yup.string().min(1) });\n\nexport default function SearchBar({ onSearch }) {\n  function handleSubmit(values) {\n    onSearch(values);\n  }\n  return (\n    <div>\n      <h2 className=\"searchbarHeader\">Movie search form</h2>\n      <Formik\n        initialValues={{\n          query: '',\n        }}\n        validationSchema={schema}\n        onSubmit={values => {\n          handleSubmit(values.query);\n        }}\n      >\n        <Form autoComplete=\"off\">\n          <Field\n            className=\"searchbarInput\"\n            id=\"query\"\n            name=\"query\"\n            placeholder=\"Please enter your query\"\n          />\n          <button type=\"submit\" className=\"searchbarButton\">\n            Search\n          </button>\n        </Form>\n      </Formik>\n    </div>\n  );\n}\n\nSearchBar.propTypes = {\n  onSearch: PropTypes.func.isRequired,\n  initialValues: PropTypes.string,\n};\n","import { useState, useEffect } from 'react';\nimport { apiQuerySearch } from 'services/api';\nimport { useSearchParams } from 'react-router-dom';\n\nimport SearchBar from 'components/Searchbar/Searchbar';\nimport { ProgressBar } from 'react-loader-spinner';\nimport ListItem from 'components/ListItem/ListItem';\n\nexport default function Movies() {\n  const [searchResult, setSearchResult] = useState(``);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  function handleSubmit(value) {\n    if (value === ``) {\n      alert(`Please enter search query`);\n      return;\n    }\n    if (value === searchParams.get(`title`)) {\n      alert(`Your are looking at the result!`);\n      return;\n    }\n    setSearchParams({ title: value });\n  }\n\n  // search on title\n  useEffect(() => {\n    const findQuerySearch = async () => {\n      const title = searchParams.get(`title`);\n      try {\n        if (!title) {\n          setSearchResult([]);\n          return;\n        }\n\n        setIsLoading(true);\n        const { results } = await apiQuerySearch(title);\n        setSearchResult(results);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    findQuerySearch();\n  }, [searchParams]);\n\n  return (\n    <div>\n      <SearchBar onSearch={handleSubmit} />\n      {isLoading ? (\n        <ProgressBar />\n      ) : (\n        <ul>\n          <ListItem resultArray={searchResult} />\n        </ul>\n      )}\n    </div>\n  );\n}\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = `1a6be4acd703bdf91bdb7fd89ae97812`;\n\nexport const apiTrending = async () => {\n  const response = await axios.get(\n    `trending/movie/week?api_key=${API_KEY}&include_adult=false`\n  );\n  return response.data;\n};\n\nexport const apiQuerySearch = async query => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&query=${query}&page=1&include_adult=false`\n  );\n  return response.data;\n};\n\nexport const apiMovieSearch = async movieId => {\n  const response = await axios.get(`movie/${movieId}?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const apiActorsSearch = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const apiReviewsSearch = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n"],"names":["Link","styled","LinkStyled","ListItem","resultArray","location","useLocation","length","style","fontSize","color","map","movie","paddingBottom","to","pathname","id","state","from","search","size","title","schema","yup","shape","query","min","SearchBar","onSearch","className","initialValues","validationSchema","onSubmit","values","handleSubmit","autoComplete","name","placeholder","type","Movies","useState","searchResult","setSearchResult","isLoading","setIsLoading","useSearchParams","searchParams","setSearchParams","useEffect","findQuerySearch","get","apiQuerySearch","results","console","log","value","alert","axios","API_KEY","apiTrending","response","data","apiMovieSearch","movieId","apiActorsSearch","apiReviewsSearch"],"sourceRoot":""}